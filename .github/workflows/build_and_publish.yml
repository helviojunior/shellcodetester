name: PyPI Build ShellcodeTester

on:
  release:
    types: [published]

jobs:
  lint:
    name: Check syntaxs errors and warnings
    runs-on: ubuntu-latest
    if:
      github.event_name == 'push' || github.event.pull_request.head.repo.full_name !=
      github.repository

    steps:
      - name: Checkout ShellcodeTester
        uses: actions/checkout@v3

      - name: Setup Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8

      - name: Check syntax errors
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Check PEP8 warnings
        run: |
          flake8 . --count --ignore=E1,E2,E3,E501,W291,W293 --exit-zero --max-complexity=65 --max-line-length=127 --statistics

  build_windows:
    name: Build windows binaries
    needs: lint
    runs-on: ubuntu-latest
    steps:

      - name: Install dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: wget
          version: 1.0

      - name: Download last release
        run: |
          wget -O /tmp/mingw-latest.zip https://github.com/helviojunior/shellcodetester/releases/download/v0.2.3/mingw-latest.zip

      - uses: actions/upload-artifact@v2
        with:
          name: mingw-latest.zip
          path: /tmp/mingw-latest.zip
          retention-days: 3

  binutils_macosx:
    name: Build macosx binaries
    needs: lint
    runs-on: macos-latest
    if:
      github.event_name == 'push' || github.event.pull_request.head.repo.full_name !=
      github.repository

    strategy:
      fail-fast: false

    steps:
      - name: Install Homebrew
        run: |
          NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          brew install binutils

      - name: Build binutils
        run: |
          cp $(which objdump) ${{ github.workspace }}/objdump_macosx

      - uses: actions/upload-artifact@v2
        with:
          name: objdump_macosx
          path: ${{ github.workspace }}/objdump_macosx
          retention-days: 3

  binutils_linux:
    name: Build linux binaries
    needs: lint
    runs-on: ubuntu-latest
    if:
      github.event_name == 'push' || github.event.pull_request.head.repo.full_name !=
      github.repository
    env:
      bin_version: '2.40'
      bin_platform: 'x86_64-pc-linux-gnu'

    strategy:
      fail-fast: false

    steps:
      - name: Set up GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: latest
          platform: x64

      - name: Install dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: texinfo flex bison libgmp-dev libmpfr-dev make wget
          version: 1.0

      - name: Download binutils
        run: |
          mkdir $GITHUB_WORKSPACE/build/
          cd $GITHUB_WORKSPACE/build/
          wget http://ftp.gnu.org/gnu/binutils/binutils-$bin_version.tar.gz
          tar xzf binutils-$bin_version.tar.gz

      - name: Build binutils
        run: |
          cd $GITHUB_WORKSPACE/build/binutils-$bin_version
          CC=gcc ./configure --target=$bin_platform --disable-nls
          make configure-host
          make LDFLAGS="-all-static"
          cp ./binutils/objdump ${{ github.workspace }}/objdump_linux

      - uses: actions/upload-artifact@v2
        with:
          name: objdump_linux
          path: ${{ github.workspace }}/objdump_linux
          retention-days: 3

  build_packages:
    name: Build packages
    needs: [binutils_linux, binutils_macosx, build_windows]
    runs-on: ubuntu-latest
    if:
      github.event_name == 'push' || github.event.pull_request.head.repo.full_name !=
      github.repository

    strategy:
      fail-fast: false

    steps:
      - name: Install dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: rpm2cpio wget 7zip unzip zip
          version: 1.0

      - name: Download arfactory (linux)
        uses: actions/download-artifact@v3
        id: download
        with:
          name: objdump_linux
          path: /tmp/

      - name: Download arfactory (MacOS)
        uses: actions/download-artifact@v3
        id: download2
        with:
          name: objdump_macosx
          path: /tmp/

      - name: Copy binaries
        run: |
          mkdir -p shell_bins/linux/
          mkdir -p shell_bins/windows/
          mkdir -p shell_bins/macosx/
          cp ${{steps.download.outputs.download-path}}/objdump_linux* shell_bins/linux/objdump
          cp ${{steps.download2.outputs.download-path}}/objdump_macosx* shell_bins/macosx/objdump

      - name: Download arfactory (windows)
        uses: actions/download-artifact@v3
        id: mingwbuild
        with:
          name: mingw-latest.zip
          path: /tmp/

      - name: Download objdump
        run: |
          unzip -o ${{steps.mingwbuild.outputs.download-path}}/mingw-latest.zip -d /tmp/
          cp /tmp/mingw64/bin/objdump.exe shell_bins/windows/objdump.exe

      - name: Download nasm
        run: |
          wget https://www.nasm.us/pub/nasm/releasebuilds/2.16.01/win64/nasm-2.16.01-win64.zip -O /tmp/nasm_win.zip
          wget https://www.nasm.us/pub/nasm/releasebuilds/2.16.01/macosx/nasm-2.16.01-macosx.zip -O /tmp/nasm_mac.zip
          wget https://www.nasm.us/pub/nasm/releasebuilds/2.16.01/linux/nasm-2.16.01-0.fc36.x86_64.rpm -O /tmp/nasm_linux.rpm
          unzip -jo /tmp/nasm_win.zip -d /tmp/
          cp /tmp/nasm.exe shell_bins/windows/
          unzip -jo /tmp/nasm_mac.zip -d /tmp/
          cp /tmp/nasm shell_bins/macosx/
          rpm2cpio /tmp/nasm_linux.rpm | cpio -idmv -D /tmp/
          cp /tmp/usr/bin/nasm shell_bins/linux/
          zip -r -9 /tmp/binutils.zip shell_bins

      - uses: actions/upload-artifact@v2
        with:
          name: binutils.zip
          path: /tmp/binutils.zip
          retention-days: 3

      - name: Upload binutils release asset
        id: upload-binutils
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: /tmp/binutils.zip
          asset_name: binutils.zip
          asset_content_type: application/zip

      - name: Upload mingw64 release asset
        id: upload-mingw
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: /tmp/mingw-latest.zip
          asset_name: mingw-latest.zip
          asset_content_type: application/zip

  publish:
    name: Publish on Live Environment
    needs: build_packages
    runs-on: ubuntu-latest
    if:
      github.event_name == 'push' || github.event.pull_request.head.repo.full_name !=
      github.repository

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9"]
        experimental: [false]
    continue-on-error: ${{ matrix.experimental }}

    steps:
      - name: Checkout ShellcodeTester
        uses: actions/checkout@v3

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download arfactory
        uses: actions/download-artifact@v3
        id: download
        with:
          name: binutils.zip
          path: /tmp/

      - name: Copy binaries
        run: |
          mkdir shell_bins/linux/
          mkdir shell_bins/windows/
          mkdir shell_bins/macosx/
          unzip -o ${{steps.download.outputs.download-path}}/binutils.zip -d shell_bins/
          echo "" > shell_bins/__init__.py
          echo "" > shell_bins/linux/__init__.py
          echo "" > shell_bins/windows/__init__.py
          echo "" > shell_bins/macosx/__init__.py

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt -r tests/requirements-test.txt

      - name: Build artifact
        run: |
          python setup.py sdist

      - name: Publish package in Live Environment
        #if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.prod_pypi_password }}
