# GitHub Action workflow to build and run ShellcodeTester's tests
#

name: Test Build

on:
    push:
      branches: [ master ]
    pull_request:
      branches: [ master ]

jobs:
  lint:
    name: Check syntaxs errors and warnings
    runs-on: ubuntu-latest
    if:
      github.event_name == 'push' || github.event.pull_request.head.repo.full_name !=
      github.repository

    steps:
      - name: Checkout KnowsMore
        uses: actions/checkout@v3

      - name: Setup Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8

      - name: Check syntax errors
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Check PEP8 warnings
        run: |
          flake8 . --count --ignore=E1,E2,E3,E501,W291,W293 --exit-zero --max-complexity=65 --max-line-length=127 --statistics

  binutils_macos:
    name: Download Binutils Windows
    needs: lint
    runs-on: ubuntu-latest
    if:
      github.event_name == 'push' || github.event.pull_request.head.repo.full_name !=
      github.repository
    env:
      bin_version: '2.28'

    strategy:
      fail-fast: false

    steps:

      - name: Install dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: unzip wget
          version: 1.0

      - name: Download nasm
        run: |
          mkdir $GITHUB_WORKSPACE/nasm/
          cd $GITHUB_WORKSPACE/nasm/
          wget -O ./nasm.zip https://www.nasm.us/pub/nasm/snapshots/latest/macosx/nasm-2.17rc0-20230220-macosx.zip
          unzip -oj nasm.zip
          cp nasm ${{ github.workspace }}/nasm_macos

      - uses: actions/upload-artifact@v2
        with:
          name: nasm_macos
          path: ${{ github.workspace }}/nasm_macos
          retention-days: 3

  binutils_windows:
    name: Download Binutils Windows
    needs: binutils_macos
    runs-on: ubuntu-latest
    if:
      github.event_name == 'push' || github.event.pull_request.head.repo.full_name !=
      github.repository
    env:
      bin_version: '2.28'

    strategy:
      fail-fast: false

    steps:

      - name: Install dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: unzip wget
          version: 1.0

      - name: Download nasm
        run: |
          mkdir $GITHUB_WORKSPACE/nasm/
          cd $GITHUB_WORKSPACE/nasm/
          wget -O ./nasm.zip https://www.nasm.us/pub/nasm/snapshots/latest/win64/nasm-2.17rc0-20230220-win64.zip
          unzip -oj nasm.zip
          cp nasm.exe ${{ github.workspace }}/nasm.exe

      - name: Download binutils
        run: |
          mkdir $GITHUB_WORKSPACE/binutils/
          cd $GITHUB_WORKSPACE/binutils/
          wget -O ./binutils.tar.xz https://razaoinfo.dl.sourceforge.net/project/mingw/MinGW/Base/binutils/binutils-$bin_version/binutils-$bin_version-1-mingw32-bin.tar.xz
          tar xvf binutils.tar.xz
          cp ./bin/objdump.exe ${{ github.workspace }}/objdump.exe

      - uses: actions/upload-artifact@v2
        with:
          name: objdump.exe
          path: ${{ github.workspace }}/objdump.exe
          retention-days: 3

      - uses: actions/upload-artifact@v2
        with:
          name: nasm.exe
          path: ${{ github.workspace }}/nasm.exe
          retention-days: 3

  binutils_linux:
    name: Build Binutils Linux
    needs: binutils_windows
    runs-on: ubuntu-latest
    if:
      github.event_name == 'push' || github.event.pull_request.head.repo.full_name !=
      github.repository
    env:
      bin_version: '2.40'
      bin_platform: 'x86_64-pc-linux-gnu'

    strategy:
      fail-fast: false

    steps:
      - name: Set up GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: latest
          platform: x64

      - name: Install dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: texinfo flex bison libgmp-dev libmpfr-dev make wget
          version: 1.0

      - name: Download binutils
        run: |
          mkdir $GITHUB_WORKSPACE/build/
          cd $GITHUB_WORKSPACE/build/
          wget http://ftp.gnu.org/gnu/binutils/binutils-$bin_version.tar.gz
          tar xzf binutils-$bin_version.tar.gz

      - name: Build binutils
        run: |
          cd $GITHUB_WORKSPACE/build/binutils-$bin_version
          CC=gcc ./configure --target=$bin_platform --disable-nls
          make configure-host
          make LDFLAGS="-all-static"
          cp ./binutils/objdump ${{ github.workspace }}/objdump_linux

      - uses: actions/upload-artifact@v2
        with:
          name: objdump_linux
          path: ${{ github.workspace }}/objdump_linux
          retention-days: 3

  test:
    name: Run unit tests and build wheel
    needs: binutils_linux
    runs-on: ${{ matrix.os }}
    if:
      github.event_name == 'push' || github.event.pull_request.head.repo.full_name !=
      github.repository

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        experimental: [false]
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - python-version: "3.7"
            experimental: false
            os: ubuntu-20.04
          - python-version: "3.11"
            experimental: true
            os: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}

    steps:
      - name: Checkout KnowsMore
        uses: actions/checkout@v3

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download arfactory (MacOS)
        uses: actions/download-artifact@v3
        id: download
        with:
          name: nasm_macos
          path: /tmp/

      - name: Download arfactory (linux)
        uses: actions/download-artifact@v3
        id: download
        with:
          name: objdump_linux
          path: /tmp/

      - name: Download arfactory (windows)
        uses: actions/download-artifact@v3
        id: download
        with:
          name: objdump.exe
          path: /tmp/

      - name: Download arfactory (windows)
        uses: actions/download-artifact@v3
        id: download
        with:
          name: nasm.exe
          path: /tmp/

      - name: Copy binaries
        run: |
          mkdir bin/{linux,windows,macos}/
          cp ${{steps.download.outputs.download-path}}/nasm_macos bin/macos/nasm
          cp ${{steps.download.outputs.download-path}}/objdump_linux bin/linux/objdump
          cp ${{steps.download.outputs.download-path}}/*.{exe,dll} bin/windows/

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r tests/requirements-test.txt

      - name: Install knowsmore
        run: |
          pip install .

      - name: Run unit tests
        run: |
          pytest -s tests/tests.py

      - name: Build artifact
        run: |
          python setup.py sdist

  publish:
    name: Publish on Test Environment
    needs: test
    runs-on: ubuntu-latest
    if:
      github.event_name == 'push' || github.event.pull_request.head.repo.full_name !=
      github.repository

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9"]
        experimental: [false]
    continue-on-error: ${{ matrix.experimental }}

    steps:
      - name: Checkout ShellcodeTester
        uses: actions/checkout@v3

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download arfactory
        uses: actions/download-artifact@v3
        id: download
        with:
          name: objdump_linux
          path: /tmp/

      - name: Copy binaries
        run: |
          mkdir bin/linux/
          mkdir bin/windows/
          mkdir bin/macosx/
          cp ${{steps.download.outputs.download-path}}/objdump_linux* bin/linux/objdump

      - name: Download nasm
        run: |
          wget https://www.nasm.us/pub/nasm/releasebuilds/2.16.01/win64/nasm-2.16.01-win64.zip -O /tmp/nasm_win.zip
          wget https://www.nasm.us/pub/nasm/releasebuilds/2.16.01/macosx/nasm-2.16.01-macosx.zip -O /tmp/nasm_mac.zip
          unzip -jo /tmp/nasm_win.zip -d /tmp/
          cp /tmp/nasm.exe bin/windows/
          unzip -jo /tmp/nasm_mac.zip -d /tmp/
          cp /tmp/nasm bin/macosx/

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r tests/requirements-test.txt

      - name: Change Package version
        run: |
          oldv=$( grep '__version__' shell_libs/__meta__.py | grep -oE '[0-9\.]+')
          current=$(date '+%Y%m%d%H%M%S')
          meta=$(cat shell_libs/__meta__.py | sed "s/__version__.*/__version__ = '"${oldv}"-"${current}"'/")
          echo "$meta" > shell_libs/__meta__.py

      - name: Install knowsmore
        run: |
          pip install .

      - name: Build artifact
        run: |
          python setup.py sdist

      - name: Publish package in Test Environment
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.test_pypi_password }}
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true
